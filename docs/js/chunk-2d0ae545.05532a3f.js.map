{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-jsx.js"],"names":["Prism","javascript","util","clone","languages","jsx","extend","tag","pattern","inside","insertBefore","spread","punctuation","attr-value","script","script-punctuation","alias","rest","stringifyToken","token","content","map","join","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","Token","hooks","add","env","language"],"mappings":"oGAAA,SAAAA,GAEA,IAAAC,EAAAD,EAAAE,KAAAC,MAAAH,EAAAI,UAAAH,YAEAD,EAAAI,UAAAC,IAAAL,EAAAI,UAAAE,OAAA,SAAAL,GACAD,EAAAI,UAAAC,IAAAE,IAAAC,QAAA,4LAEAR,EAAAI,UAAAC,IAAAE,IAAAE,OAAA,OAAAD,QAAA,kBACAR,EAAAI,UAAAC,IAAAE,IAAAE,OAAA,cAAAD,QAAA,yDACAR,EAAAI,UAAAC,IAAAE,IAAAE,OAAA,OAAAA,OAAA,0CAEAT,EAAAI,UAAAM,aAAA,sBACAC,OAAA,CACAH,QAAA,6CACAC,OAAA,CACAG,YAAA,cACAC,aAAA,SAGCb,EAAAI,UAAAC,IAAAE,KAEDP,EAAAI,UAAAM,aAAA,uBACAI,OAAA,CAEAN,QAAA,4CACAC,OAAA,CACAM,qBAAA,CACAP,QAAA,UACAQ,MAAA,eAEAC,KAAAjB,EAAAI,UAAAC,KAEAW,MAAA,wBAEChB,EAAAI,UAAAC,IAAAE,KAGD,IAAAW,EAAA,SAAAC,GACA,OAAAA,EAGA,kBAAAA,EACAA,EAEA,kBAAAA,EAAAC,QACAD,EAAAC,QAEAD,EAAAC,QAAAC,IAAAH,GAAAI,KAAA,IARA,IAWAC,EAAA,SAAAC,GAEA,IADA,IAAAC,EAAA,GACAC,EAAA,EAAgBA,EAAAF,EAAAG,OAAmBD,IAAA,CACnC,IAAAP,EAAAK,EAAAE,GACAE,GAAA,EAqCA,GAnCA,kBAAAT,IACA,QAAAA,EAAAU,MAAAV,EAAAC,QAAA,YAAAD,EAAAC,QAAA,GAAAS,KAGA,OAAAV,EAAAC,QAAA,GAAAA,QAAA,GAAAA,QAEAK,EAAAE,OAAA,GAAAF,IAAAE,OAAA,GAAAG,UAAAZ,EAAAC,EAAAC,QAAA,GAAAA,QAAA,KAEAK,EAAAM,MAGA,OAAAZ,EAAAC,QAAAD,EAAAC,QAAAO,OAAA,GAAAP,SAIAK,EAAAO,KAAA,CACAF,QAAAZ,EAAAC,EAAAC,QAAA,GAAAA,QAAA,IACAa,aAAA,IAIIR,EAAAE,OAAA,mBAAAR,EAAAU,MAAA,MAAAV,EAAAC,QAGJK,IAAAE,OAAA,GAAAM,eAEIR,EAAAE,OAAA,GAAAF,IAAAE,OAAA,GAAAM,aAAA,mBAAAd,EAAAU,MAAA,MAAAV,EAAAC,QAGJK,IAAAE,OAAA,GAAAM,eAGAL,GAAA,IAGAA,GAAA,kBAAAT,IACAM,EAAAE,OAAA,OAAAF,IAAAE,OAAA,GAAAM,aAAA,CAGA,IAAAC,EAAAhB,EAAAC,GAGAO,EAAAF,EAAAG,OAAA,sBAAAH,EAAAE,EAAA,mBAAAF,EAAAE,EAAA,GAAAG,QACAK,GAAAhB,EAAAM,EAAAE,EAAA,IACAF,EAAAW,OAAAT,EAAA,MAEAA,EAAA,sBAAAF,EAAAE,EAAA,mBAAAF,EAAAE,EAAA,GAAAG,QACAK,EAAAhB,EAAAM,EAAAE,EAAA,IAAAQ,EACAV,EAAAW,OAAAT,EAAA,KACAA,KAGAF,EAAAE,GAAA,IAAA1B,EAAAoC,MAAA,aAAAF,EAAA,KAAAA,GAIAf,EAAAC,SAAA,kBAAAD,EAAAC,SACAG,EAAAJ,EAAAC,WAKApB,EAAAqC,MAAAC,IAAA,0BAAAC,GACA,QAAAA,EAAAC,UAAA,QAAAD,EAAAC,UAGAjB,EAAAgB,EAAAf,WA1HA,CA6HCxB","file":"js/chunk-2d0ae545.05532a3f.js","sourcesContent":["(function(Prism) {\n\nvar javascript = Prism.util.clone(Prism.languages.javascript);\n\nPrism.languages.jsx = Prism.languages.extend('markup', javascript);\nPrism.languages.jsx.tag.pattern= /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;\n\nPrism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\nPrism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;\nPrism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n\nPrism.languages.insertBefore('inside', 'attr-name', {\n\t'spread': {\n\t\tpattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n\t\tinside: {\n\t\t\t'punctuation': /\\.{3}|[{}.]/,\n\t\t\t'attr-value': /\\w+/\n\t\t}\n\t}\n}, Prism.languages.jsx.tag);\n\nPrism.languages.insertBefore('inside', 'attr-value',{\n\t'script': {\n\t\t// Allow for two levels of nesting\n\t\tpattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n\t\tinside: {\n\t\t\t'script-punctuation': {\n\t\t\t\tpattern: /^=(?={)/,\n\t\t\t\talias: 'punctuation'\n\t\t\t},\n\t\t\trest: Prism.languages.jsx\n\t\t},\n\t\t'alias': 'language-javascript'\n\t}\n}, Prism.languages.jsx.tag);\n\n// The following will handle plain text inside tags\nvar stringifyToken = function (token) {\n\tif (!token) {\n\t\treturn '';\n\t}\n\tif (typeof token === 'string') {\n\t\treturn token;\n\t}\n\tif (typeof token.content === 'string') {\n\t\treturn token.content;\n\t}\n\treturn token.content.map(stringifyToken).join('');\n};\n\nvar walkTokens = function (tokens) {\n\tvar openedTags = [];\n\tfor (var i = 0; i < tokens.length; i++) {\n\t\tvar token = tokens[i];\n\t\tvar notTagNorBrace = false;\n\n\t\tif (typeof token !== 'string') {\n\t\t\tif (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n\t\t\t\t// We found a tag, now find its kind\n\n\t\t\t\tif (token.content[0].content[0].content === '</') {\n\t\t\t\t\t// Closing tag\n\t\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n\t\t\t\t\t\t// Pop matching opening tag\n\t\t\t\t\t\topenedTags.pop();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (token.content[token.content.length - 1].content === '/>') {\n\t\t\t\t\t\t// Autoclosed tag, ignore\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Opening tag\n\t\t\t\t\t\topenedTags.push({\n\t\t\t\t\t\t\ttagName: stringifyToken(token.content[0].content[1]),\n\t\t\t\t\t\t\topenedBraces: 0\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n\n\t\t\t\t// Here we might have entered a JSX context inside a tag\n\t\t\t\topenedTags[openedTags.length - 1].openedBraces++;\n\n\t\t\t} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n\n\t\t\t\t// Here we might have left a JSX context inside a tag\n\t\t\t\topenedTags[openedTags.length - 1].openedBraces--;\n\n\t\t\t} else {\n\t\t\t\tnotTagNorBrace = true\n\t\t\t}\n\t\t}\n\t\tif (notTagNorBrace || typeof token === 'string') {\n\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n\t\t\t\t// Here we are inside a tag, and not inside a JSX context.\n\t\t\t\t// That's plain text: drop any tokens matched.\n\t\t\t\tvar plainText = stringifyToken(token);\n\n\t\t\t\t// And merge text with adjacent text\n\t\t\t\tif (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n\t\t\t\t\tplainText += stringifyToken(tokens[i + 1]);\n\t\t\t\t\ttokens.splice(i + 1, 1);\n\t\t\t\t}\n\t\t\t\tif (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n\t\t\t\t\tplainText = stringifyToken(tokens[i - 1]) + plainText;\n\t\t\t\t\ttokens.splice(i - 1, 1);\n\t\t\t\t\ti--;\n\t\t\t\t}\n\n\t\t\t\ttokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n\t\t\t}\n\t\t}\n\n\t\tif (token.content && typeof token.content !== 'string') {\n\t\t\twalkTokens(token.content);\n\t\t}\n\t}\n};\n\nPrism.hooks.add('after-tokenize', function (env) {\n\tif (env.language !== 'jsx' && env.language !== 'tsx') {\n\t\treturn;\n\t}\n\twalkTokens(env.tokens);\n});\n\n}(Prism));\n"],"sourceRoot":""}