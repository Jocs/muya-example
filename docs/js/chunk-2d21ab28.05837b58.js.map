{"version":3,"sources":["webpack:///./node_modules/prismjs2/components/prism-php.js"],"names":["Prism","languages","php","extend","keyword","constant","comment","pattern","lookbehind","insertBefore","shell-comment","alias","delimiter","variable","package","inside","punctuation","property","string_interpolation","rest","nowdoc-string","greedy","heredoc-string","interpolation","single-quoted-string","double-quoted-string","hooks","add","env","test","code","phpPattern","buildPlaceholders","tokenizePlaceholders"],"mappings":"kGAYA,SAAAA,GACAA,EAAAC,UAAAC,IAAAF,EAAAC,UAAAE,OAAA,SACAC,QAAA,4aACAC,SAAA,oBACAC,QAAA,CACAC,QAAA,uCACAC,YAAA,KAIAR,EAAAC,UAAAQ,aAAA,gBACAC,gBAAA,CACAH,QAAA,eACAC,YAAA,EACAG,MAAA,aAIAX,EAAAC,UAAAQ,aAAA,iBACAG,UAAA,CACAL,QAAA,qBACAI,MAAA,aAEAE,SAAA,sBACAC,QAAA,CACAP,QAAA,kCACAC,YAAA,EACAO,OAAA,CACAC,YAAA,SAMAhB,EAAAC,UAAAQ,aAAA,kBACAQ,SAAA,CACAV,QAAA,YACAC,YAAA,KAIA,IAAAU,EAAA,CACAX,QAAA,6EACAC,YAAA,EACAO,OAAA,CACAI,KAAAnB,EAAAC,UAAAC,MAIAF,EAAAC,UAAAQ,aAAA,gBACAW,gBAAA,CACAb,QAAA,kDACAc,QAAA,EACAV,MAAA,SACAI,OAAA,CACAH,UAAA,CACAL,QAAA,2BACAI,MAAA,SACAI,OAAA,CACAC,YAAA,mBAKAM,iBAAA,CACAf,QAAA,sGACAc,QAAA,EACAV,MAAA,SACAI,OAAA,CACAH,UAAA,CACAL,QAAA,yCACAI,MAAA,SACAI,OAAA,CACAC,YAAA,iBAGAO,cAAAL,IAGAM,uBAAA,CACAjB,QAAA,yBACAc,QAAA,EACAV,MAAA,UAEAc,uBAAA,CACAlB,QAAA,yBACAc,QAAA,EACAV,MAAA,SACAI,OAAA,CACAQ,cAAAL,aAKAlB,EAAAC,UAAAC,IAAA,UAEAF,EAAA0B,MAAAC,IAAA,2BAAAC,GACA,sBAAAC,KAAAD,EAAAE,MAAA,CAIA,IAAAC,EAAA,oCACA/B,EAAAC,UAAA,qBAAA+B,kBAAAJ,EAAA,MAAAG,MAGA/B,EAAA0B,MAAAC,IAAA,0BAAAC,GACA5B,EAAAC,UAAA,qBAAAgC,qBAAAL,EAAA,UA1GA,CA6GC5B","file":"js/chunk-2d21ab28.05837b58.js","sourcesContent":["/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n(function (Prism) {\n\tPrism.languages.php = Prism.languages.extend('clike', {\n\t\t'keyword': /\\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n\t\t'constant': /\\b[A-Z0-9_]{2,}\\b/,\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'shell-comment': {\n\t\t\tpattern: /(^|[^\\\\])#.*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'comment'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'keyword', {\n\t\t'delimiter': {\n\t\t\tpattern: /\\?>|<\\?(?:php|=)?/i,\n\t\t\talias: 'important'\n\t\t},\n\t\t'variable': /\\$+(?:\\w+\\b|(?={))/i,\n\t\t'package': {\n\t\t\tpattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tpunctuation: /\\\\/\n\t\t\t}\n\t\t}\n\t});\n\n\t// Must be defined after the function pattern\n\tPrism.languages.insertBefore('php', 'operator', {\n\t\t'property': {\n\t\t\tpattern: /(->)[\\w]+/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tvar string_interpolation = {\n\t\tpattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\trest: Prism.languages.php\n\t\t}\n\t};\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'nowdoc-string': {\n\t\t\tpattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<'?|[';]$/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'heredoc-string': {\n\t\t\tpattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<\"?|[\";]$/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'interpolation': string_interpolation // See below\n\t\t\t}\n\t\t},\n\t\t'single-quoted-string': {\n\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'double-quoted-string': {\n\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'interpolation': string_interpolation // See below\n\t\t\t}\n\t\t}\n\t});\n\t// The different types of PHP strings \"replace\" the C-like standard string\n\tdelete Prism.languages.php['string'];\n\n\tPrism.hooks.add('before-tokenize', function(env) {\n\t\tif (!/(?:<\\?php|<\\?)/ig.test(env.code)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar phpPattern = /(?:<\\?php|<\\?)[\\s\\S]*?(?:\\?>|$)/ig;\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n\t});\n\n\tPrism.hooks.add('after-tokenize', function(env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n\t});\n\n}(Prism));"],"sourceRoot":""}