{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-http.js"],"names":["Prism","languages","http","request-line","pattern","inside","property","attr-name","response-status","lookbehind","header-name","alias","options","langs","httpLanguages","application/javascript","javascript","application/json","json","application/xml","xml","text/xml","text/html","html","text/css","css","suffixTypes","getSuffixPattern","contentType","suffix","replace","suffixPattern","RegExp","rest","insertBefore"],"mappings":"kGAAA,SAAAA,GACAA,EAAAC,UAAAC,KAAA,CACAC,eAAA,CACAC,QAAA,8FACAC,OAAA,CAEAC,SAAA,yDAEAC,YAAA,SAGAC,kBAAA,CACAJ,QAAA,uBACAC,OAAA,CAEAC,SAAA,CACAF,QAAA,yBACAK,YAAA,KAKAC,cAAA,CACAN,QAAA,iBACAO,MAAA,YAKA,IA8BAC,EA9BAC,EAAAb,EAAAC,UACAa,EAAA,CACAC,yBAAAF,EAAAG,WACAC,mBAAAJ,EAAAK,MAAAL,EAAAG,WACAG,kBAAAN,EAAAO,IACAC,WAAAR,EAAAO,IACAE,YAAAT,EAAAU,KACAC,WAAAX,EAAAY,KAIAC,EAAA,CACAT,oBAAA,EACAE,mBAAA,GASA,SAAAQ,EAAAC,GACA,IAAAC,EAAAD,EAAAE,QAAA,gBACAC,EAAA,wBAAAF,EAAA,eACA,YAAAD,EAAA,IAAAG,EAAA,IAMA,QAAAH,KAAAd,EACA,GAAAA,EAAAc,GAAA,CACAhB,KAAA,GAEA,IAAAR,EAAAsB,EAAAE,GAAAD,EAAAC,KACAhB,EAAAgB,GAAA,CACAxB,QAAA4B,OAAA,qBAAA5B,EAAA,yCAAmF,KACnFK,YAAA,EACAJ,OAAA,CACA4B,KAAAnB,EAAAc,KAKAhB,GACAZ,EAAAC,UAAAiC,aAAA,qBAAAtB,IA3EA,CA8ECZ","file":"js/chunk-2d0e490d.97be0a55.js","sourcesContent":["(function (Prism) {\n\tPrism.languages.http = {\n\t\t'request-line': {\n\t\t\tpattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n\t\t\tinside: {\n\t\t\t\t// HTTP Verb\n\t\t\t\t'property': /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n\t\t\t\t// Path or query argument\n\t\t\t\t'attr-name': /:\\w+/\n\t\t\t}\n\t\t},\n\t\t'response-status': {\n\t\t\tpattern: /^HTTP\\/1.[01] \\d+.*/m,\n\t\t\tinside: {\n\t\t\t\t// Status, e.g. 200 OK\n\t\t\t\t'property': {\n\t\t\t\t\tpattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t// HTTP header name\n\t\t'header-name': {\n\t\t\tpattern: /^[\\w-]+:(?=.)/m,\n\t\t\talias: 'keyword'\n\t\t}\n\t};\n\n\t// Create a mapping of Content-Type headers to language definitions\n\tvar langs = Prism.languages;\n\tvar httpLanguages = {\n\t\t'application/javascript': langs.javascript,\n\t\t'application/json': langs.json || langs.javascript,\n\t\t'application/xml': langs.xml,\n\t\t'text/xml': langs.xml,\n\t\t'text/html': langs.html,\n\t\t'text/css': langs.css\n\t};\n\n\t// Declare which types can also be suffixes\n\tvar suffixTypes = {\n\t\t'application/json': true,\n\t\t'application/xml': true\n\t};\n\n\t/**\n\t * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n\t *\n\t * @param {string} contentType\n\t * @returns {string}\n\t */\n\tfunction getSuffixPattern(contentType) {\n\t\tvar suffix = contentType.replace(/^[a-z]+\\//, '');\n\t\tvar suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n\t\treturn '(?:' + contentType + '|' + suffixPattern + ')';\n\t}\n\n\t// Insert each content type parser that has its associated language\n\t// currently loaded.\n\tvar options;\n\tfor (var contentType in httpLanguages) {\n\t\tif (httpLanguages[contentType]) {\n\t\t\toptions = options || {};\n\n\t\t\tvar pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n\t\t\toptions[contentType] = {\n\t\t\t\tpattern: RegExp('(content-type:\\\\s*' + pattern + '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\trest: httpLanguages[contentType]\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\tif (options) {\n\t\tPrism.languages.insertBefore('http', 'header-name', options);\n\t}\n\n}(Prism));\n"],"sourceRoot":""}