{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-scss.js"],"names":["Prism","languages","scss","extend","comment","pattern","lookbehind","atrule","inside","rule","url","selector","parent","alias","placeholder","variable","property","insertBefore","keyword","statement","boolean","null","operator","rest"],"mappings":"mGAAAA,MAAAC,UAAAC,KAAAF,MAAAC,UAAAE,OAAA,OACAC,QAAA,CACAC,QAAA,uCACAC,YAAA,GAEAC,OAAA,CACAF,QAAA,0CACAG,OAAA,CACAC,KAAA,YAKAC,IAAA,0BAQAC,SAAA,CAEAN,QAAA,iFACAG,OAAA,CACAI,OAAA,CACAP,QAAA,IACAQ,MAAA,aAEAC,YAAA,UACAC,SAAA,2BAGAC,SAAA,CACAX,QAAA,4CACAG,OAAA,CACAO,SAAA,6BAKAf,MAAAC,UAAAgB,aAAA,iBACAC,QAAA,CACA,sGACA,CACAb,QAAA,4BACAC,YAAA,MAKAN,MAAAC,UAAAgB,aAAA,oBAEAF,SAAA,2BAGAf,MAAAC,UAAAgB,aAAA,mBACAH,YAAA,CACAT,QAAA,UACAQ,MAAA,YAEAM,UAAA,CACAd,QAAA,6BACAQ,MAAA,WAEAO,QAAA,qBACAC,KAAA,CACAhB,QAAA,WACAQ,MAAA,WAEAS,SAAA,CACAjB,QAAA,kDACAC,YAAA,KAIAN,MAAAC,UAAAC,KAAA,UAAAM,OAAAe,KAAAvB,MAAAC,UAAAC","file":"js/chunk-2d0de77e.e18f25b1.js","sourcesContent":["Prism.languages.scss = Prism.languages.extend('css', {\n\t'comment': {\n\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\tlookbehind: true\n\t},\n\t'atrule': {\n\t\tpattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n\t\tinside: {\n\t\t\t'rule': /@[\\w-]+/\n\t\t\t// See rest below\n\t\t}\n\t},\n\t// url, compassified\n\t'url': /(?:[-a-z]+-)*url(?=\\()/i,\n\t// CSS selector regex is not appropriate for Sass\n\t// since there can be lot more things (var, @ directive, nesting..)\n\t// a selector must start at the end of a property or after a brace (end of other rules or nesting)\n\t// it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n\t// the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n\t// can \"pass\" as a selector- e.g: proper#{$erty})\n\t// this one was hard to do, so please be careful if you edit this one :)\n\t'selector': {\n\t\t// Initial look-ahead is used to prevent matching of blank selectors\n\t\tpattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n\t\tinside: {\n\t\t\t'parent': {\n\t\t\t\tpattern: /&/,\n\t\t\t\talias: 'important'\n\t\t\t},\n\t\t\t'placeholder': /%[-\\w]+/,\n\t\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n\t\t}\n\t},\n\t'property': {\n\t\tpattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n\t\tinside: {\n\t\t\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n\t\t}\n\t}\n});\n\nPrism.languages.insertBefore('scss', 'atrule', {\n\t'keyword': [\n\t\t/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,\n\t\t{\n\t\t\tpattern: /( +)(?:from|through)(?= )/,\n\t\t\tlookbehind: true\n\t\t}\n\t]\n});\n\nPrism.languages.insertBefore('scss', 'important', {\n\t// var and interpolated vars\n\t'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\n\nPrism.languages.insertBefore('scss', 'function', {\n\t'placeholder': {\n\t\tpattern: /%[-\\w]+/,\n\t\talias: 'selector'\n\t},\n\t'statement': {\n\t\tpattern: /\\B!(?:default|optional)\\b/i,\n\t\talias: 'keyword'\n\t},\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'null': {\n\t\tpattern: /\\bnull\\b/,\n\t\talias: 'keyword'\n\t},\n\t'operator': {\n\t\tpattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n\t\tlookbehind: true\n\t}\n});\n\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n"],"sourceRoot":""}