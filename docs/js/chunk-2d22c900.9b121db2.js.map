{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-lisp.js"],"names":["Prism","simple_form","name","RegExp","primitive","pattern","symbol","marker","par","endpar","space","language","heading","alias","comment","string","greedy","inside","argument","quoted-symbol","lisp-property","splice","keyword","lookbehind","declare","interactive","boolean","number","defvar","variable","defun","arguments","function","punctuation","lambda","car","arg","lisp-marker","rest","varform","forms","arglist","rest-vars","other-marker-vars","keys","util","clone","sublist","languages","lisp","elisp","emacs"],"mappings":"kGAAA,SAAAA,GAIA,SAAAC,EAAAC,GACA,OAAAC,OAAA,QAAAD,EAAA,gBAGA,SAAAE,EAAAC,GACA,OAAAF,OAAA,YAAAE,EAAA,cAOA,IAAAC,EAAA,yBAEAC,EAAA,IAAAD,EAEAE,EAAA,QACAC,EAAA,UAEAC,EAAA,UAEAC,EAAA,CAGAC,QAAA,CACAP,QAAA,QACAQ,MAAA,qBAEAC,QAAA,MACAC,OAAA,CACAV,QAAA,oBACAW,QAAA,EACAC,OAAA,CACAC,SAAA,oBACAZ,OAAAH,OAAA,IAAAG,EAAA,OAGAa,gBAAA,CACAd,QAAAF,OAAA,MAAAG,GACAO,MAAA,uBAEAO,gBAAA,CACAf,QAAAF,OAAA,IAAAG,GACAO,MAAA,YAEAQ,OAAA,CACAhB,QAAAF,OAAA,MAAAG,GACAO,MAAA,uBAEAS,QAAA,CACA,CACAjB,QAAAF,OACAK,EACA,8IACAE,GAEAa,YAAA,GAEA,CACAlB,QAAAF,OACAK,EAAA,wDAAAE,GAEAa,YAAA,IAGAC,QAAA,CACAnB,QAAAJ,EAAA,WACAsB,YAAA,EACAV,MAAA,WAEAY,YAAA,CACApB,QAAAJ,EAAA,eACAsB,YAAA,EACAV,MAAA,WAEAa,QAAA,CACArB,QAAAD,EAAA,aACAmB,YAAA,GAEAI,OAAA,CACAtB,QAAAD,EAAA,yBACAmB,YAAA,GAEAK,OAAA,CACAvB,QAAAF,OAAAK,EAAA,oCAAAF,GACAiB,YAAA,EACAN,OAAA,CACAK,QAAA,aACAO,SAAA1B,OAAAG,KAGAwB,MAAA,CACAzB,QAAAF,OACAK,EACA,qCACAF,EACA,wBAEAiB,YAAA,EACAN,OAAA,CACAK,QAAA,kBAGAS,UAAA,KACAC,SAAA,CACA3B,QAAAF,OAAA,SAAAG,GACAiB,YAAA,GAEAU,YAAA,SAGAC,OAAA,CACA7B,QAAAF,OAAAK,EAAA,qBAAAF,EAAA,aACAiB,YAAA,EACAN,OAAA,CACAK,QAAA,UAGAS,UAAA,KACAE,YAAA,SAGAE,IAAA,CACA9B,QAAAF,OAAAK,EAAAF,GACAiB,YAAA,GAEAU,YAAA,CAEA,qBAEA,CACA5B,QAAA,eACAkB,YAAA,KAKAa,EAAA,CACAC,cAAAlC,OAAAI,GACA+B,KAAA,CACApB,SAAA,CACAb,QAAAF,OAAAG,GACAO,MAAA,YAEA0B,QAAA,CACAlC,QAAAF,OAAAK,EAAAF,EAAA,mBAAAG,GACAc,YAAA,EACAN,OAAA,CACAF,OAAAJ,EAAAI,OACAW,QAAAf,EAAAe,QACAC,OAAAhB,EAAAgB,OACArB,OAAAK,EAAAL,OACA2B,YAAA,WAMAO,EAAA,oBAEAC,EAAA,CACApC,QAAAF,OAAAK,EAAA,YAAAC,GACAc,YAAA,EACAN,OAAA,CACAyB,YAAA,CACArC,QAAAF,OAAA,qBAAAqC,GACAvB,OAAAmB,GAEAO,oBAAA,CACAtC,QAAAF,OAAA,wBAAAqC,GACAvB,OAAAmB,GAEAQ,KAAA,CACAvC,QAAAF,OAAA,WAAAqC,EAAA,8BACAvB,OAAAmB,GAEAlB,SAAA,CACAb,QAAAF,OAAAG,GACAO,MAAA,YAEAoB,YAAA,SAIAtB,EAAA,UAAAM,OAAAc,UAAAU,EACA9B,EAAA,SAAAM,OAAAc,UAAA/B,EAAA6C,KAAAC,MAAAL,GACA9B,EAAA,SAAAM,OAAAc,UAAAd,OAAA8B,QAAAN,EAEAzC,EAAAgD,UAAAC,KAAAtC,EACAX,EAAAgD,UAAAE,MAAAvC,EACAX,EAAAgD,UAAAG,MAAAxC,EACAX,EAAAgD,UAAA,cAAArC,GAnMA,CAoMCX","file":"js/chunk-2d22c900.9b121db2.js","sourcesContent":["(function (Prism) {\n\t// Functions to construct regular expressions\n\t// simple form\n\t// e.g. (interactive ... or (interactive)\n\tfunction simple_form(name) {\n\t\treturn RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])');\n\t}\n\t// booleans and numbers\n\tfunction primitive(pattern) {\n\t\treturn RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])');\n\t}\n\n\t// Patterns in regular expressions\n\n\t// Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n\t// & and : are excluded as they are usually used for special purposes\n\tvar symbol = '[-+*/_~!@$%^=<>{}\\\\w]+';\n\t// symbol starting with & used in function arguments\n\tvar marker = '&' + symbol;\n\t// Open parenthesis for look-behind\n\tvar par = '(\\\\()';\n\tvar endpar = '(?=\\\\))';\n\t// End the pattern with look-ahead space\n\tvar space = '(?=\\\\s)';\n\n\tvar language = {\n\t\t// Three or four semicolons are considered a heading.\n\t\t// See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n\t\theading: {\n\t\t\tpattern: /;;;.*/,\n\t\t\talias: ['comment', 'title']\n\t\t},\n\t\tcomment: /;.*/,\n\t\tstring: {\n\t\t\tpattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\targument: /[-A-Z]+(?=[.,\\s])/,\n\t\t\t\tsymbol: RegExp('`' + symbol + \"'\")\n\t\t\t}\n\t\t},\n\t\t'quoted-symbol': {\n\t\t\tpattern: RegExp(\"#?'\" + symbol),\n\t\t\talias: ['variable', 'symbol']\n\t\t},\n\t\t'lisp-property': {\n\t\t\tpattern: RegExp(':' + symbol),\n\t\t\talias: 'property'\n\t\t},\n\t\tsplice: {\n\t\t\tpattern: RegExp(',@?' + symbol),\n\t\t\talias: ['symbol', 'variable']\n\t\t},\n\t\tkeyword: [\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\tpar +\n\t\t\t\t\t\t'(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +\n\t\t\t\t\t\tspace\n\t\t\t\t),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: RegExp(\n\t\t\t\t\tpar + '(?:for|do|collect|return|finally|append|concat|in|by)' + space\n\t\t\t\t),\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t],\n\t\tdeclare: {\n\t\t\tpattern: simple_form('declare'),\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\t\tinteractive: {\n\t\t\tpattern: simple_form('interactive'),\n\t\t\tlookbehind: true,\n\t\t\talias: 'keyword'\n\t\t},\n\t\tboolean: {\n\t\t\tpattern: primitive('(?:t|nil)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\tnumber: {\n\t\t\tpattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n\t\t\tlookbehind: true\n\t\t},\n\t\tdefvar: {\n\t\t\tpattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^def[a-z]+/,\n\t\t\t\tvariable: RegExp(symbol)\n\t\t\t}\n\t\t},\n\t\tdefun: {\n\t\t\tpattern: RegExp(\n\t\t\t\tpar +\n\t\t\t\t\t'(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +\n\t\t\t\t\tsymbol +\n\t\t\t\t\t'\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^(?:cl-)?def\\S+/,\n\t\t\t\t// See below, this property needs to be defined later so that it can\n\t\t\t\t// reference the language object.\n\t\t\t\targuments: null,\n\t\t\t\tfunction: {\n\t\t\t\t\tpattern: RegExp('(^\\\\s)' + symbol),\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\tpunctuation: /[()]/\n\t\t\t}\n\t\t},\n\t\tlambda: {\n\t\t\tpattern: RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^lambda/,\n\t\t\t\t// See below, this property needs to be defined later so that it can\n\t\t\t\t// reference the language object.\n\t\t\t\targuments: null,\n\t\t\t\tpunctuation: /[()]/\n\t\t\t}\n\t\t},\n\t\tcar: {\n\t\t\tpattern: RegExp(par + symbol),\n\t\t\tlookbehind: true\n\t\t},\n\t\tpunctuation: [\n\t\t\t// open paren, brackets, and close paren\n\t\t\t/(['`,]?\\(|[)\\[\\]])/,\n\t\t\t// cons\n\t\t\t{\n\t\t\t\tpattern: /(\\s)\\.(?=\\s)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t]\n\t};\n\n\tvar arg = {\n\t\t'lisp-marker': RegExp(marker),\n\t\trest: {\n\t\t\targument: {\n\t\t\t\tpattern: RegExp(symbol),\n\t\t\t\talias: 'variable'\n\t\t\t},\n\t\t\tvarform: {\n\t\t\t\tpattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\tstring: language.string,\n\t\t\t\t\tboolean: language.boolean,\n\t\t\t\t\tnumber: language.number,\n\t\t\t\t\tsymbol: language.symbol,\n\t\t\t\t\tpunctuation: /[()]/\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tvar forms = '\\\\S+(?:\\\\s+\\\\S+)*';\n\n\tvar arglist = {\n\t\tpattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'rest-vars': {\n\t\t\t\tpattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\t'other-marker-vars': {\n\t\t\t\tpattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\tkeys: {\n\t\t\t\tpattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n\t\t\t\tinside: arg\n\t\t\t},\n\t\t\targument: {\n\t\t\t\tpattern: RegExp(symbol),\n\t\t\t\talias: 'variable'\n\t\t\t},\n\t\t\tpunctuation: /[()]/\n\t\t}\n\t};\n\n\tlanguage['lambda'].inside.arguments = arglist;\n\tlanguage['defun'].inside.arguments = Prism.util.clone(arglist);\n\tlanguage['defun'].inside.arguments.inside.sublist = arglist;\n\n\tPrism.languages.lisp = language;\n\tPrism.languages.elisp = language;\n\tPrism.languages.emacs = language;\n\tPrism.languages['emacs-lisp'] = language;\n}(Prism));\n"],"sourceRoot":""}