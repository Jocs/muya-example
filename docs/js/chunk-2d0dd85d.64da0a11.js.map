{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-markdown.js"],"names":["Prism","languages","markdown","extend","insertBefore","blockquote","pattern","alias","code","greedy","inside","code-block","lookbehind","code-language","punctuation","title","hr","list","url-reference","variable","string","bold","italic","strike","url","forEach","token","hooks","add","env","walkTokens","tokens","i","l","length","type","codeLang","content","codeBlock","trim","split","toLowerCase","push","language","classes","cls","match","exec","grammar","replace","highlight","md"],"mappings":"mGAAAA,MAAAC,UAAAC,SAAAF,MAAAC,UAAAE,OAAA,aACAH,MAAAC,UAAAG,aAAA,qBACAC,WAAA,CAEAC,QAAA,kBACAC,MAAA,eAEAC,KAAA,CACA,CAEAF,QAAA,kBACAC,MAAA,WAEA,CAGAD,QAAA,oBACAC,MAAA,WAEA,CAIAD,QAAA,qBACAG,QAAA,EACAC,OAAA,CACAC,aAAA,CACAL,QAAA,qDACAM,YAAA,GAEAC,gBAAA,CACAP,QAAA,WACAM,YAAA,GAEAE,YAAA,SAIAC,MAAA,CACA,CAMAT,QAAA,8BACAC,MAAA,YACAG,OAAA,CACAI,YAAA,cAGA,CAGAR,QAAA,cACAM,YAAA,EACAL,MAAA,YACAG,OAAA,CACAI,YAAA,aAIAE,GAAA,CAKAV,QAAA,wCACAM,YAAA,EACAL,MAAA,eAEAU,KAAA,CAKAX,QAAA,mCACAM,YAAA,EACAL,MAAA,eAEAW,gBAAA,CAKAZ,QAAA,qHACAI,OAAA,CACAS,SAAA,CACAb,QAAA,gBACAM,YAAA,GAEAQ,OAAA,+DACAN,YAAA,kBAEAP,MAAA,OAEAc,KAAA,CAKAf,QAAA,uDACAM,YAAA,EACAH,QAAA,EACAC,OAAA,CACAI,YAAA,wBAGAQ,OAAA,CAKAhB,QAAA,oDACAM,YAAA,EACAH,QAAA,EACAC,OAAA,CACAI,YAAA,gBAGAS,OAAA,CAKAjB,QAAA,mDACAM,YAAA,EACAH,QAAA,EACAC,OAAA,CACAI,YAAA,cAGAU,IAAA,CAGAlB,QAAA,yEACAI,OAAA,CACAS,SAAA,CACAb,QAAA,sBACAM,YAAA,GAEAQ,OAAA,CACAd,QAAA,gCAMA,2BAAAmB,QAAA,SAAAC,GACA,iCAAAD,QAAA,SAAAf,GACAgB,IAAAhB,IACAV,MAAAC,UAAAC,SAAAwB,GAAAhB,UAAAV,MAAAC,UAAAC,SAAAQ,QAKAV,MAAA2B,MAAAC,IAAA,0BAAAC,GAKA,SAAAC,EAAAC,GACA,GAAAA,GAAA,kBAAAA,EAIA,QAAAC,EAAA,EAAAC,EAAAF,EAAAG,OAAoCF,EAAAC,EAAOD,IAAA,CAC3C,IAAAN,EAAAK,EAAAC,GAEA,YAAAN,EAAAS,KAAA,CAKA,IAAAC,EAAAV,EAAAW,QAAA,GACAC,EAAAZ,EAAAW,QAAA,GAEA,GAAAD,GAAAE,GACA,kBAAAF,EAAAD,MAAA,eAAAG,EAAAH,MACA,kBAAAC,EAAAC,QAAA,CAGA,IAAA9B,EAAA,YAAA6B,EAAAC,QAAAE,OAAAC,MAAA,UAAAC,cAGAH,EAAA/B,MAEK,kBAAA+B,EAAA/B,MACL+B,EAAA/B,MAAA,CAAA+B,EAAA/B,SAEA+B,EAAA/B,MAAAmC,KAAAnC,GAJA+B,EAAA/B,MAAA,CAAAA,SAhBAuB,EAAAJ,EAAAW,UAbA,aAAAR,EAAAc,UAAA,OAAAd,EAAAc,UAuCAb,EAAAD,EAAAE,UAGA/B,MAAA2B,MAAAC,IAAA,gBAAAC,GACA,kBAAAA,EAAAM,KAAA,CAKA,IADA,IAAAC,EAAA,GACAJ,EAAA,EAAAC,EAAAJ,EAAAe,QAAAV,OAAwCF,EAAAC,EAAOD,IAAA,CAC/C,IAAAa,EAAAhB,EAAAe,QAAAZ,GACAc,EAAA,gBAAAC,KAAAF,GACA,GAAAC,EAAA,CACAV,EAAAU,EAAA,GACA,OAIA,IAAAE,EAAAhD,MAAAC,UAAAmC,GAEA,GAAAY,EAAA,CAKA,IAAAxC,EAAAqB,EAAAQ,QAAAY,QAAA,QAAqC,KAAAA,QAAA,SAAuB,KAE5DpB,EAAAQ,QAAArC,MAAAkD,UAAA1C,EAAAwC,EAAAZ,OAGApC,MAAAC,UAAAkD,GAAAnD,MAAAC,UAAAC","file":"js/chunk-2d0dd85d.64da0a11.js","sourcesContent":["Prism.languages.markdown = Prism.languages.extend('markup', {});\nPrism.languages.insertBefore('markdown', 'prolog', {\n\t'blockquote': {\n\t\t// > ...\n\t\tpattern: /^>(?:[\\t ]*>)*/m,\n\t\talias: 'punctuation'\n\t},\n\t'code': [\n\t\t{\n\t\t\t// Prefixed by 4 spaces or 1 tab\n\t\t\tpattern: /^(?: {4}|\\t).+/m,\n\t\t\talias: 'keyword'\n\t\t},\n\t\t{\n\t\t\t// `code`\n\t\t\t// ``code``\n\t\t\tpattern: /``.+?``|`[^`\\n]+`/,\n\t\t\talias: 'keyword'\n\t\t},\n\t\t{\n\t\t\t// ```optional language\n\t\t\t// code block\n\t\t\t// ```\n\t\t\tpattern: /^```[\\s\\S]*?^```$/m,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'code-block': {\n\t\t\t\t\tpattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'code-language': {\n\t\t\t\t\tpattern: /^(```).+/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'punctuation': /```/\n\t\t\t}\n\t\t}\n\t],\n\t'title': [\n\t\t{\n\t\t\t// title 1\n\t\t\t// =======\n\n\t\t\t// title 2\n\t\t\t// -------\n\t\t\tpattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n\t\t\talias: 'important',\n\t\t\tinside: {\n\t\t\t\tpunctuation: /==+$|--+$/\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t// # title 1\n\t\t\t// ###### title 6\n\t\t\tpattern: /(^\\s*)#+.+/m,\n\t\t\tlookbehind: true,\n\t\t\talias: 'important',\n\t\t\tinside: {\n\t\t\t\tpunctuation: /^#+|#+$/\n\t\t\t}\n\t\t}\n\t],\n\t'hr': {\n\t\t// ***\n\t\t// ---\n\t\t// * * *\n\t\t// -----------\n\t\tpattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n\t\tlookbehind: true,\n\t\talias: 'punctuation'\n\t},\n\t'list': {\n\t\t// * item\n\t\t// + item\n\t\t// - item\n\t\t// 1. item\n\t\tpattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n\t\tlookbehind: true,\n\t\talias: 'punctuation'\n\t},\n\t'url-reference': {\n\t\t// [id]: http://example.com \"Optional title\"\n\t\t// [id]: http://example.com 'Optional title'\n\t\t// [id]: http://example.com (Optional title)\n\t\t// [id]: <http://example.com> \"Optional title\"\n\t\tpattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n\t\tinside: {\n\t\t\t'variable': {\n\t\t\t\tpattern: /^(!?\\[)[^\\]]+/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n\t\t\t'punctuation': /^[\\[\\]!:]|[<>]/\n\t\t},\n\t\talias: 'url'\n\t},\n\t'bold': {\n\t\t// **strong**\n\t\t// __strong__\n\n\t\t// Allow only one line break\n\t\tpattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'punctuation': /^\\*\\*|^__|\\*\\*$|__$/\n\t\t}\n\t},\n\t'italic': {\n\t\t// *em*\n\t\t// _em_\n\n\t\t// Allow only one line break\n\t\tpattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'punctuation': /^[*_]|[*_]$/\n\t\t}\n\t},\n\t'strike': {\n\t\t// ~~strike through~~\n\t\t// ~strike~\n\n\t\t// Allow only one line break\n\t\tpattern: /(^|[^\\\\])(~~?)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'punctuation': /^~~?|~~?$/\n\t\t}\n\t},\n\t'url': {\n\t\t// [example](http://example.com \"Optional title\")\n\t\t// [example] [id]\n\t\tpattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n\t\tinside: {\n\t\t\t'variable': {\n\t\t\t\tpattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n\t\t\t\tlookbehind: true\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n\t\t\t}\n\t\t}\n\t}\n});\n\n['bold', 'italic', 'strike'].forEach(function (token) {\n\t['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n\t\tif (token !== inside) {\n\t\t\tPrism.languages.markdown[token].inside[inside] = Prism.languages.markdown[inside];\n\t\t}\n\t});\n});\n\nPrism.hooks.add('after-tokenize', function (env) {\n\tif (env.language !== 'markdown' && env.language !== 'md') {\n\t\treturn;\n\t}\n\n\tfunction walkTokens(tokens) {\n\t\tif (!tokens || typeof tokens === 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, l = tokens.length; i < l; i++) {\n\t\t\tvar token = tokens[i];\n\n\t\t\tif (token.type !== 'code') {\n\t\t\t\twalkTokens(token.content);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar codeLang = token.content[1];\n\t\t\tvar codeBlock = token.content[3];\n\n\t\t\tif (codeLang && codeBlock &&\n\t\t\t\tcodeLang.type === 'code-language' && codeBlock.type === 'code-block' &&\n\t\t\t\ttypeof codeLang.content === 'string') {\n\n\t\t\t\t// this might be a language that Prism does not support\n\t\t\t\tvar alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase();\n\n\t\t\t\t// add alias\n\t\t\t\tif (!codeBlock.alias) {\n\t\t\t\t\tcodeBlock.alias = [alias];\n\t\t\t\t} else if (typeof codeBlock.alias === 'string') {\n\t\t\t\t\tcodeBlock.alias = [codeBlock.alias, alias];\n\t\t\t\t} else {\n\t\t\t\t\tcodeBlock.alias.push(alias);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\twalkTokens(env.tokens);\n});\n\nPrism.hooks.add('wrap', function (env) {\n\tif (env.type !== 'code-block') {\n\t\treturn;\n\t}\n\n\tvar codeLang = '';\n\tfor (var i = 0, l = env.classes.length; i < l; i++) {\n\t\tvar cls = env.classes[i];\n\t\tvar match = /language-(.+)/.exec(cls);\n\t\tif (match) {\n\t\t\tcodeLang = match[1];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tvar grammar = Prism.languages[codeLang];\n\n\tif (!grammar) {\n\t\treturn;\n\t}\n\n\t// reverse Prism.util.encode\n\tvar code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n\n\tenv.content = Prism.highlight(code, grammar, codeLang);\n});\n\nPrism.languages.md = Prism.languages.markdown;\n"],"sourceRoot":""}