{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-php.js"],"names":["Prism","languages","php","extend","keyword","boolean","pattern","alias","constant","comment","lookbehind","insertBefore","shell-comment","delimiter","variable","package","inside","punctuation","property","string_interpolation","rest","nowdoc-string","greedy","heredoc-string","interpolation","single-quoted-string","double-quoted-string","hooks","add","env","test","code","phpPattern","buildPlaceholders","tokenizePlaceholders"],"mappings":"oGAYA,SAAAA,GACAA,EAAAC,UAAAC,IAAAF,EAAAC,UAAAE,OAAA,SACAC,QAAA,ueACAC,QAAA,CACAC,QAAA,sBACAC,MAAA,YAEAC,SAAA,CACA,uBACA,iBAEAC,QAAA,CACAH,QAAA,uCACAI,YAAA,KAIAV,EAAAC,UAAAU,aAAA,gBACAC,gBAAA,CACAN,QAAA,eACAI,YAAA,EACAH,MAAA,aAIAP,EAAAC,UAAAU,aAAA,iBACAE,UAAA,CACAP,QAAA,6BACAC,MAAA,eAIAP,EAAAC,UAAAU,aAAA,iBACAG,SAAA,sBACAC,QAAA,CACAT,QAAA,kCACAI,YAAA,EACAM,OAAA,CACAC,YAAA,SAMAjB,EAAAC,UAAAU,aAAA,kBACAO,SAAA,CACAZ,QAAA,YACAI,YAAA,KAIA,IAAAS,EAAA,CACAb,QAAA,6EACAI,YAAA,EACAM,OAAA,CACAI,KAAApB,EAAAC,UAAAC,MAIAF,EAAAC,UAAAU,aAAA,gBACAU,gBAAA,CACAf,QAAA,kDACAgB,QAAA,EACAf,MAAA,SACAS,OAAA,CACAH,UAAA,CACAP,QAAA,2BACAC,MAAA,SACAS,OAAA,CACAC,YAAA,mBAKAM,iBAAA,CACAjB,QAAA,sGACAgB,QAAA,EACAf,MAAA,SACAS,OAAA,CACAH,UAAA,CACAP,QAAA,yCACAC,MAAA,SACAS,OAAA,CACAC,YAAA,iBAGAO,cAAAL,IAGAM,uBAAA,CACAnB,QAAA,yBACAgB,QAAA,EACAf,MAAA,UAEAmB,uBAAA,CACApB,QAAA,yBACAgB,QAAA,EACAf,MAAA,SACAS,OAAA,CACAQ,cAAAL,aAKAnB,EAAAC,UAAAC,IAAA,UAEAF,EAAA2B,MAAAC,IAAA,2BAAAC,GACA,SAAAC,KAAAD,EAAAE,MAAA,CAIA,IAAAC,EAAA,mIACAhC,EAAAC,UAAA,qBAAAgC,kBAAAJ,EAAA,MAAAG,MAGAhC,EAAA2B,MAAAC,IAAA,0BAAAC,GACA7B,EAAAC,UAAA,qBAAAiC,qBAAAL,EAAA,UApHA,CAuHC7B","file":"js/chunk-2d0e982c.e6693f3e.js","sourcesContent":["/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n(function (Prism) {\n\tPrism.languages.php = Prism.languages.extend('clike', {\n\t\t'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n\t\t'boolean': {\n\t\t\tpattern: /\\b(?:false|true)\\b/i,\n\t\t\talias: 'constant'\n\t\t},\n\t\t'constant': [\n\t\t\t/\\b[A-Z_][A-Z0-9_]*\\b/,\n\t\t\t/\\b(?:null)\\b/i,\n\t\t],\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'shell-comment': {\n\t\t\tpattern: /(^|[^\\\\])#.*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'comment'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'comment', {\n\t\t'delimiter': {\n\t\t\tpattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n\t\t\talias: 'important'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'keyword', {\n\t\t'variable': /\\$+(?:\\w+\\b|(?={))/i,\n\t\t'package': {\n\t\t\tpattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tpunctuation: /\\\\/\n\t\t\t}\n\t\t}\n\t});\n\n\t// Must be defined after the function pattern\n\tPrism.languages.insertBefore('php', 'operator', {\n\t\t'property': {\n\t\t\tpattern: /(->)[\\w]+/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tvar string_interpolation = {\n\t\tpattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\trest: Prism.languages.php\n\t\t}\n\t};\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'nowdoc-string': {\n\t\t\tpattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<'?|[';]$/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'heredoc-string': {\n\t\t\tpattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<\"?|[\";]$/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'interpolation': string_interpolation // See below\n\t\t\t}\n\t\t},\n\t\t'single-quoted-string': {\n\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'double-quoted-string': {\n\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'interpolation': string_interpolation // See below\n\t\t\t}\n\t\t}\n\t});\n\t// The different types of PHP strings \"replace\" the C-like standard string\n\tdelete Prism.languages.php['string'];\n\n\tPrism.hooks.add('before-tokenize', function(env) {\n\t\tif (!/<\\?/.test(env.code)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n\t\tPrism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n\t});\n\n\tPrism.hooks.add('after-tokenize', function(env) {\n\t\tPrism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n\t});\n\n}(Prism));\n"],"sourceRoot":""}